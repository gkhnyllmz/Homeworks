#/* $begin ncopy-ys */
##################################################################
# ncopy.ys - Copy a src block of len words to dst.
# Return the number of positive words (>0) contained in src.
#
# Include your name and ID here.
# Gökhan Yılmaz 2237956
# Describe how and why you modified the baseline code.
# -----1-----
# Since I added iaddq instruction in the pipe processor, 
# I deleted irmovq instructions which stores constants in register to use these register as a constant in addq and subq instructions.
# I changed addq instructions which add and substructs some constants to registers with iaddq
# -----2-----
# In conditional jumps, I tried to decrease mispredictions. In Test, there is only one condition which causes misprediction which is length < 6.
# However this will be encountered only once, so it will make misprediction only once.
# Similarly, in Test2, there is only one condition that causes misprediction which is length < 0, and this will be also encountered only one.
# However, since the lists are random, I cannot know whether there is more positive or negative number.
# Therefore, I cannot optimize mispredictions while looking the value is positive or negative.
# -----3-----
# I tried unrollings 2x2,3x3,4x4,5x5,6x6,7x7,8x8,16x8; and I saw that 6x6 unrolling are giving the best CPE, so I used it. 

##################################################################
# Do not modify this portion
# Function prologue.
# %rdi = src, %rsi = dst, %rdx = len
ncopy:

##################################################################
# You can modify this portion
	# Loop header
	xorq %rax,%rax		# count = 0;

Test:
	iaddq $-6, %rdx # Is length greater than 6?
	jge Loop # If yes, go to loop and make 6x6 unrolling
	iaddq $6, %rdx # If no, restore the length
	jmp Test2 # And go to 1-by-1 copy loop

Loop:
	mrmovq (%rdi), %r8    # \
	mrmovq 8(%rdi), %r9   #  |
	mrmovq 16(%rdi), %r10 #  |--\ Load 6 values from memory(src)
	mrmovq 24(%rdi), %r11 #  |--/ to 6 accumulators
	mrmovq 32(%rdi), %r12 #  |
	mrmovq 40(%rdi), %r13 # /
	rmmovq %r8, (%rsi)    # \
	rmmovq %r9, 8(%rsi)   #  |
	rmmovq %r10, 16(%rsi) #  |--\ Copy values in accumulators
	rmmovq %r11, 24(%rsi) #  |--/ to memory(dst)
	rmmovq %r12, 32(%rsi) #  |
	rmmovq %r13, 40(%rsi) # /
	iaddq $48, %rdi # Increase src pointer by 48(6x8bytes) 
	iaddq $48, %rsi # Increase dst pointer by 48(6x8bytes)
	andq %r8, %r8 # Set SF if value is negative
	jle L4 # If value is negative, don't increase count and go to next value
	iaddq $1, %rax # If value is positive, increase count and continue with next value

L4:
	andq %r9, %r9
	jle L5
	iaddq $1, %rax

L5:
	andq %r10, %r10
	jle L6
	iaddq $1, %rax

L6:
	andq %r11, %r11
	jle L7
	iaddq $1, %rax

L7:
	andq %r12, %r12
	jle L8
	iaddq $1, %rax

L8:
	andq %r13, %r13
	jle Test # If value is negative, don't increase count and go to test which controls that remaining list's length is greater than or equal to 6
	iaddq $1, %rax # If value is positive, increase count
	jmp Test # And go to test which controls that remaining list's length is greater than or equal 6

Test2:
	iaddq $-1, %rdx # To do copy, length should be greater than 1. This will set SF if length < 1.
	jge Loop2 # If SF is not 1, then length is greater than or equal to 1, so we can do copy.
	ret # If length is less than 1, our process will complete.

Loop2:
	mrmovq (%rdi), %r8 # Load 1 value from memory(src)
	iaddq $8, %rdi # Increase src by 8(1x8bytes)
	rmmovq %r8, (%rsi) # Copy value to memory(src)
	iaddq $8, %rsi # Increase dst by 8(1x8bytes)
	andq %r8, %r8 # Control value is positive
	jle Test2 # If no, go to Test2, and control whether all list is copied
	iaddq $1, %rax # If yes, increase count
	jmp Test2 # And go to Test2, and control whether all list is copied

##################################################################
# Do not modify the following section of code
# Function epilogue.
Done:
	ret
##################################################################
# Keep the following label at the end of your function
End:
#/* $end ncopy-ys */
